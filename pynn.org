#+TITLE: Python Neural Network From Scratch

* Weights

** On a scale of 0 to 50, how important to you is machine learning?

  40... I still have to eat and sleep.

** What about exercise? How much downwards would you adjust machine learning's importance to account for not just eating and sleeping, but also for exercise?

Good point. Maybe I'd adjust it down 5 points to 35.

** Great. What if someone else uses a different scale and you want to compare your numbers with them. What if their scale is 0 to 100? If you said "Exercise is 5 points of importance", would you be accurately conveying to them how important exercise is to you?

No. 5 points for me on my 0 to 50 scale is not the same as 5 points to someone on a 0 to 100 scale.

** Maybe we should use percentages instead?

Yeah. If I said exercise is 10% importance, then everyone will know how important it is to me regardless of what scale they are using.

** How could eating, sleeping, exercsing, and machine learning be evenly divided into the 24 hours of a day?

#+begin_example
        [                    24 hours                     ]

        [eating,  sleeping,  exercising,  machine learning]

Average [    6h,        6h,          6h,                6h]
You     [    3h,        6h,          3h,               12h]

        [                 % of 24 hours                   ]
Average [   25%,       25%,         25%,               25%]
You     [ 12.5%,       25%,       12.5%,               50%]
#+end_example

** How many hours more do you dedicate to machine learning than the average person?

6 hours more.

** What could you multiply the average person's time spent on machine learning to arrive at the amount of time you spend on machine learning?

Well, the average person spends 8 hours and I spend 16, so I could multiply the average by 2 to get to my number.

** Could you do the same thing for the other categories of activities?

Of course. I spend 1/2th (6 / 2) the average time eating, 1/1th the average time sleeping, 1/2 the average time exercising, and 2/1 the average time machine learning.

** Instead of using [3h, 6h, 3h, 12h] to identify your preferences, could we use your percentages in relation to the baseline of [6h, 6h, 6h, 6h]?

Sure. That would just be [1/2, 1/1, 1/2, 2/1]. With that list of percentages and with the baseline list of [6h, 6h, 6h, 6h], it's a simple matter of multiplication to end up back at my preferences of [3h, 6h, 3h, 12h].

#+begin_example
  [ 6h		 6h		 6h		 6h]
,* [1/2		1/1		1/2		2/1]

= [ 3h		 6h		 3h		12h]
#+end_example

** If 6 * 1/2 = 3, does 3 * 2/1 = 6?

Of course.

** If 6 * 2/1 = 12, does 12 * 1/2 = 6?

Yes... get on with it already...

** If a * b/c = d, does d * c/b = a?

That's a little abstract. But yeah, I think that makes sense.

I think I've actually seen that as if ~a * b = c~ then ~a = c/b~.  And not to get too fancy with math terms, but division is the same thing as multiplying by the inverse, right? So ~c / b~ is the same thing as ~c * 1/b~.

** Great. So if we know your hourly preferences ([3h, 6h, 3h, 12h]), and we know your percentage preferences ([1/2, 1/1, 1/2, 2/1]), can we perform that type of calculation to arrive at the average preference of [6h, 6h, 6h, 6h]?

Yeah. If my hourly preference for eating is 3h and I know that it is 1/2 of the average, then I know the average is 2/1 times that of my preference. 2/1 * 3h is 6h. We can do that for every category.

#+begin_example
  [ 3h		 6h		 3h		12h]
,* [2/1		1/1		2/1		1/2]

= [ 6h		 6h		 6h		 6h]
#+end_example


** If we multiply your hourly preferences by your percentage preferences, how many total hours do we get?

We already did this.

#+begin_example
  [ 3h		 6h		 3h		12h]
,* [2/1		1/1		2/1		1/2]

= [ 6h		 6h		 6h		 6h]
#+end_example

24.

There's only 24 hours in a day.


** So if we multiplied your hourly preferences by some unknown percentages, and got 30, are those your percentages?

No. I only have 24 hours in a day. My hourly preferences times my percentage preferences can only add up to 24.

** So if we got 24, then we know they are your percentages?

Yeah.

** Are you sure?

I'm sure you wouldn't be asking if I was sure without a reason, so let me think about it.

A problem solving technique I like to use is to imagine extremes to find counter examples.

One extreme that jumps out as a counter example is what if someone has a 200% preference for machine learning and 0% preference for everything else.

#+begin_example
  [ 3h		 6h		 3h		 12h]
,* [ 0		  0		  0		 2/1]

= [ 0h		 0h		 0h		 24h]
#+end_example

My hourly preferences multiplied by that set of percentage preferences would add up to 24 total hours even though those percentages aren't *my* percentages.

** So if your hourly preferences multiplied by some unknown percentage preference adds up to 24 total hours, it *might* be your preferences. But if it *doesn't* add up to 24 hours, then it's definitely not your percentage preferences?

Right.

** Does this hold in the other direction too? If we had some unknown hourly preferences and multiplied them by your percentages?

Yes. If they didn't add up to 24, they couldn't be mine.

* Identifying a person given some hourly preferences

** What are your hourly preferences again?

#+begin_example
[eating    sleeping    exercising    machine learning]
[    3h          6h            3h                 12h]
#+end_example

And as percentages from the baseline

#+begin_example
[1/2    1/1    1/2    2/1]
or in decimal...
[0.5    1.0    0.5    2.0]
#+end_example

** What are mine?

You haven't told me yet.

** Oh. Here.

#+begin_example
[eating    sleeping    exercising    machine learning]
[    6h          6h            4h                 8h]
#+end_example

And as percentages from the baseline

#+begin_example
[1/1    1/1    2/3    4/3]
or in decimal...
[1.0    1.0    0.7    1.3]
#+end_example

** Here is another person's hourly preferences: [2h 6h 8h 8h]. Are their preferences more similar to mine, or yours?

Hm. That's not immediately obvious. I suppose we could see how different each category is.

#+begin_example
Theirs:       [2h   6h  8h  8h]
Mine:         [3h   6h  3h 12h]
Difference    [+1h +0h -5h +4h]
#+end_example

#+begin_example
Theirs:             [2h   6h  8h  8h]
Yours (the author): [6h   6h  4h  8h]
Difference:         [+4h +0h -4h +0h]
#+end_example

#+begin_example
Difference between mine and theirs:               [+1h +0h -5h +4h]
Difference between yours (the author) and theirs: [+4h +0h -4h +0h]
#+end_example

It's still not immediately obvious. Theirs is different from mine by a lot in some places and by a little in others. Theirs is different from yours by a lot in some places and a little in others.

It would be nice to have a single number that would make this obvious. I suppose we could add up all of the differences and use that.

Mine are different by 1h, 0h, 5h, and 4h. ~1 + 0 + 5 + 4 = 11~.
Yours are different by 4h, 0h, 4h, and 0h. ~4 + 0 + 4 + 0 = 8~.

I suppose that means this persons preferences are more similar to yours than mine.

** What would happen if you performed the same calculation but with percentage preferences rather than hourly preferences?

I don't know their percentage preferences.
#+begin_example
Theirs:       [?%     ?%    ?%    ?%]
Mine:         [0.5   1.0   0.5   2.0]
#+end_example

** What if you used their hourly preferences and your percentage preferences?

#+begin_example
Theirs:     [2h     6h    8h    8h]
Mine:       [0.5   1.0   0.5   2.0]
#+end_example

Well, I couldn't do subtraction to find the difference like I did before.

But I could multiply. I remember that my percentages multiplied by my hourly should be 24. So however far this is from 24, that's how similar this person's preferences are to mine.

#+begin_example
Theirs:     [2h     6h    8h    8h]
Mine:       [0.5   1.0   0.5   2.0]
Multiplied: [1h     6h    4h   16h]
Total:      [1   +  6  +  4  + 16 ] = 27
#+end_example

#+begin_example
Theirs:                   [2h       6h     8h      8h]
Yours (the author):       [1.0     1.0    0.7     1.3]
Multiplied:               [2.0h   6.0h   5.6h   10.4h]
Total:                    [2.0  + 6.0  + 5.6  + 10.4 ] = 24
#+end_example

Oh look, their hourly preferences times your percentage preferences is 24. That's the same as your hourly preferences times your percentage preferences. That's what we talked about earlier. Just because they add up to 24 doesn't mean it's the same person. But if it doesn't add up to 24, then it's definitely *not* the same person.

Anyway, this does seem to confirm that the preferences of this unknown person are more similar to yours than to mine.

This doesn't seem very... rigorous. I get a sense we're on the right track. But I have a feeling we could poke holes in this if we thought about it some more.

** Is that OK?

Maybe. As long as we recognize the shortcomings of less-than-rigorous logic. Everyone goes down wrong paths before they find the right path to truth. It's fun to explore. Just don't overcommit too soon.

* Learning

** Are the numbers we get when we multiply someone's hourly preferences by someone's percentage preferences meaningful?

Yes. If it's the same person's hourly and percentage averages, then we expect the sum of the numbers to add up to 24.

That's one way it's meaningful.

If we multiply a particular person's hourly preferences by a particular persons percentage prefences, it might not add up to 24, but it can help us tell two people apart.

For example, in the previous section we saw that:

My percentage prefences multiplied by some unknown person's hourly preferences was 27.

Your percentage preferences multiplied by some unknown person's hourly preferences was 24.

If we were given some known hourly preferences, like [2h 6h 8h 8h], and some unknown percentage preferences (either mine or yours, but we don't know which), we could do the math to figure it out. If the result was 27, we know it was mine.

** What if

* Neural Network

#+begin_src python
false_and_false_input = [0, 0]
true_and_false_input  = [1, 0]
false_and_true_input  = [0, 1]
true_and_true_input   = [1, 1]

false_and_false_target_output = 0
true_and_false_target_output  = 0
false_and_true_target_output  = 0
true_and_true_target_output   = 1

weighted_importance_of_first_input_node  = 0.0
weighted_importance_of_second_input_node = 0.0
weights = [
    weighted_importance_of_first_input_node,
    weighted_importance_of_second_input_node,
]

def multiply_input_nodes_by_weight_nodes(input_nodes, weight_nodes):
    running_total = 0
    for i in range(len(input_nodes)):
        running_total += input_nodes[i] * weight_nodes[i]
    return running_total

all_inputs = [
    false_and_false_input,
    false_and_true_input,
    true_and_false_input,
    true_and_true_input,
]

all_target_outputs = [
    false_and_false_target_output,
    true_and_false_target_output,
    false_and_true_target_output,
    true_and_true_target_output,
]

results_of_multiplying_inputs_by_weights = []
for input_nodes in all_inputs:
    results_of_multiplying_inputs_by_weights.append(
        multiply_input_nodes_by_weight_nodes(input_nodes, weights)
    )

difference_between_calculated_results_and_target_results = []
for i in range(len(results_of_multiplying_inputs_by_weights)):
    difference_between_calculated_results_and_target_results.append(
        all_target_outputs[i]
        - results_of_multiplying_inputs_by_weights[i]
    )

print(difference_between_calculated_results_and_target_results)
#+end_src
